// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
  }

  // Enums
  enum UserRole {
    SKATER
    COACH
    ORGANIZER
    ADMIN
    CLUB_ADMIN
  }

  enum CompetitionStatus {
    DRAFT
    PUBLISHED
    REGISTRATION_OPEN
    REGISTRATION_CLOSED
    IN_PROGRESS
    COMPLETED
    CANCELLED
  }

  enum RegistrationStatus {
    PENDING
    CONFIRMED
    PAID
    CANCELLED
    WAITLISTED
  }

  enum PaymentStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    REFUNDED
  }

  // Models
  model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
  }

  model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

  model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(SKATER)
    phone         String?
    dateOfBirth   DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    accounts      Account[]
    sessions      Session[]
    competitions  Competition[]
    registrations Registration[]
    club          Club?         @relation(fields: [clubId], references: [id])
    clubId        String?
    coachStudents User[]        @relation("CoachStudent")
    coaches       User[]        @relation("CoachStudent")

    @@map("users")
  }

  model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
  }

  model Club {
    id          String   @id @default(cuid())
    name        String
    address     String?
    phone       String?
    email       String?
    website     String?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    members     User[]
    competitions Competition[]

    @@map("clubs")
  }

  model Competition {
    id          String            @id @default(cuid())
    name        String
    description String?
    startDate   DateTime
    endDate     DateTime
    venue       String
    address     String?
    status      CompetitionStatus @default(DRAFT)
    entryFee    Decimal           @default(0)
    maxEntries  Int?
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    // Relations
    organizer     User           @relation(fields: [organizerId], references: [id])
    organizerId   String
    club          Club?          @relation(fields: [clubId], references: [id])
    clubId        String?
    events        Event[]
    registrations Registration[]

    @@map("competitions")
  }

  model Event {
    id          String  @id @default(cuid())
    name        String
    category    String
    ageGroup    String?
    level       String?
    entryFee    Decimal @default(0)
    maxEntries  Int?
    description String?
    requirements String?
    startTime   DateTime?
    endTime     DateTime?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    competition   Competition    @relation(fields: [competitionId], references: [id], onDelete: Cascade)
    competitionId String
    registrations Registration[]

    @@map("events")
  }

  model Registration {
    id        String             @id @default(cuid())
    status    RegistrationStatus @default(PENDING)
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    notes     String?

    // Relations
    skater        User        @relation(fields: [skaterId], references: [id])
    skaterId      String
    event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId       String
    competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
    competitionId String
    payment       Payment?

    @@unique([skaterId, eventId])
    @@map("registrations")
  }

  model Payment {
    id                String        @id @default(cuid())
    amount            Decimal
    currency          String        @default("USD")
    status            PaymentStatus @default(PENDING)
    stripePaymentId   String?       @unique
    stripeIntentId    String?       @unique
    paymentMethod     String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt

    // Relations
    registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
    registrationId String       @unique

    @@map("payments")
  }